#!/bin/bash

Usage() {
	echo "Usage: $0 (command) [arg] ..."
	echo ""
	echo "Commands:"
	echo "    list                             - List defined base and work chroots"
	echo "    new (base-chroot) (name) [...]   - Create a new persistent chroot and run it."
	echo "                                       The container name will be like ${USER}-name"
	echo "                                       Any arguments after the name will be passed as arguments to docker run"
	echo "    end (name)                       - Remove the named work chroot"
	echo "    run (name | base-chroot) [...]   - If provided a work-chroot, start the container and connect to a bash shell inside."
	echo "                                       If provided a base-chroot, start the indicated base-chroot and automatically remove it when exited."
	echo "                                       Any arguments after the name will be passed as arguments to docker run"
	echo "    promote (name)                   - Promote the specified chroot so that new work-chroots can be made based off of it."
	echo "    demote  (name)                   - Demote the specified chroot so that new work-chroots can no longer be made based off of it."
	echo ""
	echo "Additional arguments to always pass to docker run can be configured in /etc/lego.conf."
	echo "This is useful for volumes and the like. See README for more information."
	exit 1
}

WorkChroots() {
	docker ps -a --format '{{.Names}}' | grep -vE '(registry|jenkins)'
}
BaseChroots() {
	# Print all images in the format {image name}:{version}, remove jenkins, registry, and ubuntu images, and remove :latest text
	docker images --format '{{.Repository}}:{{.Tag}}' | grep -vE '(jenkins|registry|ubuntu)' | sed 's|:latest||'
}

# The config file lets you specify what command to run in the container
# Allow the conf file to not exist by making sure that the LEGO_RUN_COMMAND variable has a default value.
LEGO_RUN_COMMAND="/bin/bash"

# Load up lego config file
source /etc/lego.conf

# Prepare volume arguments to pass to docker run
LEGO_VOLUMES_ARG=""
for volume in ${LEGO_VOLUMES}; do
	LEGO_VOLUMES_ARG="${LEGO_VOLUMES_ARG} -v ${volume}"
done

COMMAND=$1
case $COMMAND in
	list)
		echo "Definted base-chroots:"
		BaseChroots
		echo ""
		echo "Defined work-chroots:"
		WorkChroots
		exit 0
		;;
	new)
		BASE=$2
		NAME=$3
		shift
		shift
		shift

		if [ "${NAME}" = "" ] || [ "${BASE}" = "" ]; then Usage; fi
		
		echo "Creating container with the name ${USER}-${NAME} and running it."
		echo "This container will still be around when you exit so please remember to end it."
		echo ""
		docker run -it --name "${USER}-${NAME}" --user builder ${LEGO_VOLUMES_ARG} $@ "${BASE}" "${LEGO_RUN_COMMAND}"
		exit 0
		;;
	end)
		NAME=$2

		if [ "${NAME}" = "" ]; then Usage; fi

		if docker rm "${NAME}"; then
			echo "Removed container with the name ${NAME}"
		fi
		exit 0
		;;
	run)
		NAME=$2
		shift
		shift
		if [ "${NAME}" = "" ]; then Usage; fi
		
		if WorkChroots | grep -q "^${NAME}\$"; then
			echo "Running persistent chroot ${NAME}"
			docker start -i "${NAME}"
		elif BaseChroots | grep -q "^${NAME}\$"; then
			echo "Starting transient chroot of base ${NAME}."
			echo "WARNING: This chroot will be automatically cleaned up when you exit."
			docker run --rm -it --name "${USER}-TRANSIENT" --user builder ${LEGO_VOLUMES_ARG} $@ "${NAME}" "${LEGO_RUN_COMMAND}"
		fi
		exit 0
		;;
	promote)
		
		NAME=$2
		if [ "${NAME}" = "" ]; then Usage; fi
		
		BASE="$(docker ps -a --format '{{.Image}}' --filter name="${NAME}")"
		docker commit ${NAME} "${BASE}:${NAME}"
		;;
	demote)
		NAME=$2
		if [ "${NAME}" = "" ]; then Usage; fi
		
		BASE="$(docker ps -a --format '{{.Image}}' --filter name="${NAME}")"
		docker rmi "${BASE}:${NAME}"
		;;
	*)
		Usage
		;;
	'')
		Usage
		;;
esac



